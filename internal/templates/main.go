// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package main generated by go-bindata.// sources:
// templates/full/main.tex
// templates/full/text.tex
// templates/full/titul.tex
// templates/simple/main.tex
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFullMainTex = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x4e\xdb\x4c\x10\xc7\xcf\xdf\x3e\x85\x2f\xdf\xcd\x4a\x0b\x85\x23\xb7\x56\x7d\x80\x1e\x31\x87\xb5\x3d\x76\xb6\x78\xd7\xab\xdd\x09\x24\xac\x2c\x41\x90\xb8\x80\xd4\x6b\x4f\xad\x8a\xfa\x00\x2e\x22\x6d\xda\x90\xf0\x0a\xb3\x6f\x54\xd9\x71\x4a\x12\x55\x15\x27\xcf\xee\xcc\xff\x37\x33\xff\x75\x94\x96\xc9\x40\x82\xc2\xa4\xe0\xd6\x1e\xf2\x3d\xcd\x35\x98\x30\xd8\xd9\xd5\x78\xe4\xb8\x41\x91\x14\x50\x31\x16\x0d\x2c\x68\x9e\x1c\xf3\x1c\x0e\x41\xe5\x85\xb0\xfd\x30\x30\x03\x6b\x05\x57\x47\x2e\xe6\x31\x14\xd5\x7a\x91\x13\x2a\x05\x85\x99\x30\x16\x37\x13\xfd\x91\x06\x63\x20\xdb\x84\xba\x1c\x4a\x09\x68\x46\x15\x8b\x56\xa1\x3b\x01\x13\x97\x16\xc2\xd5\x54\x28\xb9\xc9\x85\x3a\xd8\x4d\x64\x18\xaf\xc5\x45\x17\xbf\x4a\x64\x68\xba\x78\xa7\xb7\x9f\xc8\xad\x1e\x5c\x5a\xec\xcb\x8a\x45\x0a\x4e\xb1\x0f\xa5\x01\xe9\xba\x6f\xe5\xe8\x96\x26\xb4\xf0\xe7\x34\xa1\x07\xaa\x37\x8b\xe4\xc8\x0c\x0a\xa8\x1c\x7d\xf6\xe7\x54\xd3\x1d\x4d\x69\x46\x8b\x2d\xba\xce\x33\x5d\x94\x68\xb7\xae\x65\x9a\x19\x2e\x21\xad\x58\x24\xd3\x2c\x85\x4c\x28\xb0\x38\x2a\x60\xd5\xda\xbe\x6b\x4e\x95\x63\xff\x09\xa5\xc0\x60\xa9\xbb\x15\xf6\x35\x86\xdd\x65\x5c\x22\x96\x72\xb5\xda\x4b\x8d\x6c\x39\xa0\x4c\x3b\x08\xa8\x93\xc3\x96\x7a\xb0\x41\x3d\x72\xf1\x3f\x17\x7c\x86\xfe\x19\x9b\x9f\x1a\xae\x33\x91\x6f\xbe\x73\x6e\xb8\xee\x8b\x64\xd8\x3c\xe8\x32\xb4\x9a\x63\xdf\x39\x21\x79\x0e\xf6\x45\x55\xb1\xe8\x35\x24\x05\x37\xf0\xb6\xcb\xbf\x19\x22\x28\x2b\x4a\x65\x5d\x4f\xa7\x59\xd8\xd3\x2a\x0f\x7b\xef\x75\xbe\xd5\x0f\xc5\xf1\x59\x73\x15\x43\x2e\x94\x5b\xfd\xc1\x15\x8b\x52\xc8\xa2\x84\x67\x6e\x67\xaf\x3b\x68\x03\xba\x4c\x1d\x7d\xa5\x8f\xf4\x29\xa0\xc7\x76\xfb\x47\x5a\xd0\x7d\xeb\xc0\x53\xc9\x99\xa3\x7b\x5a\xd0\x8c\xbe\xd3\x9c\x16\xfe\xc2\x8f\xfd\xcd\x56\xfd\x1f\x45\xc1\x63\xc5\x25\x38\x9a\x53\x4d\x3f\xe8\x8e\x6a\x9a\xd3\x94\x26\x01\xcd\xa8\xa6\x6f\xad\xc7\xb5\x1f\xb7\xdf\x39\x2d\xe8\x67\xd0\x7a\xd7\x24\xc6\xfe\xfa\x09\x92\x0a\x8b\x7f\x81\xdc\xd3\xd4\x5f\xf8\x2b\x9a\xd2\x23\xcd\x68\x4a\xf3\x46\xc3\xfe\x0f\xe8\x96\xa6\x7e\xec\x2f\x69\xe6\x6f\x1a\x95\xff\x10\xb4\x73\x9e\x2f\xa5\xfe\x8a\x6a\x16\x09\xa5\x07\xe8\x50\xe0\xa0\xe8\x21\x0c\x1b\x97\x2c\x60\x52\x0e\x14\x82\x71\x9a\xe7\x50\xb9\xdd\x25\xee\xcb\xba\xd6\x5f\x07\xad\x01\xbf\xfc\x25\x3d\xd0\x84\xe6\x7e\xbc\x86\x83\x21\xae\x68\x28\xb0\x80\x86\xc3\x58\x04\x2a\x5d\x73\xff\x77\x00\x00\x00\xff\xff\xad\xdb\x25\x85\x4b\x04\x00\x00")

func templatesFullMainTexBytes() ([]byte, error) {
	return bindataRead(
		_templatesFullMainTex,
		"templates/full/main.tex",
	)
}

func templatesFullMainTex() (*asset, error) {
	bytes, err := templatesFullMainTexBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/full/main.tex", size: 1099, mode: os.FileMode(420), modTime: time.Unix(1596735387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFullTextTex = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x29\x49\xad\x28\x49\x4a\xab\x0e\xce\xcf\x4d\x55\x00\xb1\x15\x32\x52\x8b\x52\xf5\xf4\xf4\x6a\x01\x01\x00\x00\xff\xff\xae\x03\xeb\x47\x1a\x00\x00\x00")

func templatesFullTextTexBytes() ([]byte, error) {
	return bindataRead(
		_templatesFullTextTex,
		"templates/full/text.tex",
	)
}

func templatesFullTextTex() (*asset, error) {
	bytes, err := templatesFullTextTexBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/full/text.tex", size: 26, mode: os.FileMode(420), modTime: time.Unix(1596735266, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesFullTitulTex = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x95\xdd\x6e\x13\x47\x14\xc7\xaf\x77\x9f\x62\xae\x72\x05\x56\x92\x06\xa4\xf6\x55\xba\xbd\x70\x9c\x85\x5a\x72\x4c\xe4\x04\x54\x61\x59\x5a\x3b\x51\x5b\x09\x24\x36\x09\x86\xc5\xc1\x8e\x3f\x10\x2d\xa2\x55\x1d\x93\x05\xab\x26\x6b\x89\x27\xf8\xcd\x2b\xe4\x49\xaa\x73\xbc\x4e\x4c\xec\x20\x5a\x75\x6f\xd6\x3b\x67\xce\xc7\xfc\xcf\xef\x8c\xbd\x75\xff\x6e\xbe\x58\xde\xc9\xef\x14\xfc\xad\xec\x5d\xbf\xe2\x3a\xe9\x52\xce\x2f\xee\xf8\xa5\x8a\xeb\x38\xbc\x24\xa2\x49\x44\x87\x2e\x75\xda\xfa\x3e\xa0\x65\x38\xe0\x2d\x1d\x7e\xa7\xce\xa1\x7c\xb6\xd8\xa7\x4d\xc8\x73\x5a\x1c\x10\xaa\xcf\x5f\x86\xc8\xd0\x24\xa4\x47\x43\x7e\xb6\x69\xd1\xa1\x43\xc4\x0b\x3a\x34\x68\xf1\xc2\xf0\x8a\x3a\x4f\x35\x76\xc8\x6b\x22\x22\x57\xf2\xbe\x22\xe6\x94\xd8\x06\xf4\x19\xd9\xc7\x9c\x91\x10\x1b\xde\x91\xd8\xaa\xdd\xe5\x94\xbe\x0d\x6c\xd5\xd6\x18\x10\x73\x36\x35\xf7\x19\xd8\x1a\x89\x7e\x7e\x9c\x2e\x26\x9c\x68\x98\x0f\x24\x0c\xe8\xdb\x1a\xf1\x4c\x48\xbb\x6b\x7f\xb1\x01\x31\xef\x25\x1f\x67\x0c\xc5\x67\x60\x1f\xd9\xaa\xfd\x95\x58\x32\x1a\xc6\x36\x20\xb1\x7b\xc4\xb6\x6a\xab\x0c\x35\xc3\x65\x5d\xba\xe5\x4a\x16\x09\x64\x9f\xc8\x51\x3e\x89\x4e\x22\x48\x83\xee\x4d\x8e\xa9\xa7\x4a\xee\xd3\xa3\xcd\xa1\x0a\x11\x89\x10\x87\xaa\x4e\x8f\xa7\x84\x17\x42\xd7\x69\xd2\xe4\xad\x98\x7b\xaa\xe9\x41\xda\x85\x48\xa3\x74\x0d\x21\x7f\xaa\xae\x0d\xf5\x96\x76\xfd\x46\x3d\x55\x57\x3b\x73\x4c\x9b\x88\x7d\x5a\xa9\xfc\x5d\x7d\xd7\x27\x1d\xfa\x34\x72\x1d\xc7\x7b\xb0\xbd\x95\xcd\xf9\xe5\x95\xcc\x2d\x7f\xb3\xa2\xf2\x37\x08\xd3\xc6\xb4\x09\xcd\xf9\xde\x33\x2f\x97\xbd\x33\xb3\x75\x4d\x36\x3a\x9e\x5f\xdc\xb8\x80\xc5\x75\xb4\x85\x92\xa8\x4b\x68\x78\x4e\xc8\x1b\x22\xde\x68\xae\xd0\xd0\x11\x4a\x5e\xeb\x97\xb6\xde\xbd\x88\xb6\x3c\x4d\xac\xc5\xd6\x39\xa6\xa5\x2a\x08\x48\x72\xcc\x23\xfe\xb8\xdc\xbc\x32\xd9\xea\x15\xef\x95\x36\xb3\x85\xed\xfc\x43\xbf\x2c\x85\xa5\x30\x67\xd7\xef\x17\xb2\xa5\x4a\x39\x97\xcb\x09\xbf\x8e\xb7\x55\xf2\xb7\xee\x6d\x3c\x34\x57\x9f\xa5\xb9\x95\x19\x53\xea\x35\x6f\xf2\x3c\xf3\xfd\xcd\x15\xff\xa7\x1f\x34\xf6\xfd\xe2\x86\x5f\x2a\xe4\x8b\x7e\xd9\xfb\x71\x52\xdc\xad\xdc\x66\xa5\x22\x01\xfe\x83\xc9\xf3\x24\x28\xa7\x24\x8c\x78\x2f\x64\x09\xe0\xf6\xf1\x0d\x65\x34\x63\x14\xf7\x98\xb1\x50\x2a\xab\x66\xc9\x30\x26\xe1\x94\x31\x43\x5b\x95\x25\x9d\x8b\x1a\xfd\xcf\x4f\xc3\x50\x69\xfc\x99\xa1\x42\xfb\xe8\x86\xb1\x7b\xf4\xf9\xc8\x90\x91\x50\x7a\x79\x38\x2d\xe0\xc3\x94\x5f\xe2\x85\xe2\x7c\x41\xb7\x6b\x1f\x0d\xad\xb8\x4c\x3b\xe4\x3a\x15\x59\x9c\x76\xf5\xf6\x04\xa8\xb9\xfb\xe7\x88\x3e\x27\x24\x32\x5a\x32\xd9\x36\x90\xc9\xb3\x4f\x8c\xce\x9a\x18\xe4\xb4\xe7\x7b\xcf\x56\x67\x39\x4e\x29\xf6\x0a\xd9\xf5\x62\x76\xd3\x5f\x60\x12\xe1\x44\x2d\xd1\x4d\x74\x19\x8b\x12\x9c\x11\x7f\x67\xce\x83\x97\xe2\xb8\x91\xdf\xde\x39\x0f\x9a\x73\x90\x4f\x23\x7d\xab\x05\xcf\x20\xdf\x9b\xdc\x89\xc2\xee\x91\x0e\xd7\xd1\x97\x98\x75\x17\x11\xab\xc8\xea\x88\xf6\xf4\x4a\x6c\xca\x80\x1f\xd2\xce\x98\x25\xb3\x72\x7b\x6d\xf5\xdf\xaa\xbe\x64\xe8\x64\x08\x33\x86\xfd\x09\x17\x8c\x88\x19\x5c\x4b\xf4\xe7\xbe\x0b\x40\xfd\xe6\x7a\x86\xd7\xbe\x0a\xef\xaf\x2f\xfc\x7f\x21\xdb\xbd\xca\x9c\xf7\xe0\x4e\xbe\x50\x58\x04\x5a\x47\x99\xff\xdb\xd6\xe4\x8e\x8e\x65\xd2\x6c\xc0\x89\xdd\xb5\x01\xef\x84\x98\xd5\xe5\xd5\xe5\x2b\x30\x4c\x62\x5f\xfe\x7d\xfe\x13\x00\x00\xff\xff\x80\xc6\x37\xa9\x51\x07\x00\x00")

func templatesFullTitulTexBytes() ([]byte, error) {
	return bindataRead(
		_templatesFullTitulTex,
		"templates/full/titul.tex",
	)
}

func templatesFullTitulTex() (*asset, error) {
	bytes, err := templatesFullTitulTexBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/full/titul.tex", size: 1873, mode: os.FileMode(420), modTime: time.Unix(1596734959, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSimpleMainTex = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x31\xae\x03\x21\x0c\x05\x7b\x9f\xe2\x1f\xe0\x37\xc9\x75\x96\x2d\x0c\xbc\x65\xad\x10\x07\x61\x53\x44\x88\xbb\xa7\x8a\x94\x6d\x67\x46\x9a\x90\x5f\x69\x3c\xa1\x9e\x2a\x9b\x6d\xb7\x7b\xf3\x7d\x72\x77\x49\x15\x8b\xc2\x30\x34\x4e\x0f\x2e\xd8\xa0\xa5\x8a\x9d\xff\x7f\x7d\x98\x09\xeb\x3e\x23\x47\xd4\x4b\x34\x45\x33\xd4\x0f\xe9\xe6\x57\x71\xbe\x1b\x7a\xc7\xb1\x88\x42\x44\x11\x9d\xdf\xf1\x22\xa2\x00\xcd\x3f\xe0\x13\x00\x00\xff\xff\xf3\x83\x07\xa8\x95\x00\x00\x00")

func templatesSimpleMainTexBytes() ([]byte, error) {
	return bindataRead(
		_templatesSimpleMainTex,
		"templates/simple/main.tex",
	)
}

func templatesSimpleMainTex() (*asset, error) {
	bytes, err := templatesSimpleMainTexBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/simple/main.tex", size: 149, mode: os.FileMode(420), modTime: time.Unix(1596744286, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/full/main.tex":   templatesFullMainTex,
	"templates/full/text.tex":   templatesFullTextTex,
	"templates/full/titul.tex":  templatesFullTitulTex,
	"templates/simple/main.tex": templatesSimpleMainTex,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"full": &bintree{nil, map[string]*bintree{
			"main.tex":  &bintree{templatesFullMainTex, map[string]*bintree{}},
			"text.tex":  &bintree{templatesFullTextTex, map[string]*bintree{}},
			"titul.tex": &bintree{templatesFullTitulTex, map[string]*bintree{}},
		}},
		"simple": &bintree{nil, map[string]*bintree{
			"main.tex": &bintree{templatesSimpleMainTex, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
