name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.4
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
        go get github.com/mitchellh/gox

    - name: Building
      run: go build -v ./cmd/doc-gen

    - name: Testing
      run: go test -v ./...
    
    - name: Crosscompile build
      run: gox -osarch="linux/amd64 linux/386 linux/arm windows/amd64 windows/386 darwin/amd64" -output "build/{{.Dir}}_{{.OS}}_{{.Arch}}" ./... 

    - name: Uploading artifacts  
      uses: actions/upload-artifact@v2
      with:
        name: bins
        path: ./build/

  deploy:
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/master'
      needs: [build]
      steps:
        - name: Variables
          id: vars
          run: |
            echo "::set-output name=date::$(date +'%d-%m-%Y')"
            echo "::set-output name=time::$(date +'%H:%M')"
            echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

        - name: Download artifacts
          uses: actions/download-artifact@v2
          with:
            name: bins
        
        - name: Create Release
          uses: actions/create-release@v1
          id: create_release
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: doc-gen-${{ steps.vars.outputs.sha8 }}
            release_name: Build for (${{steps.vars.outputs.time}} ${{ steps.vars.outputs.date }})
            draft: false
            prerelease: false

        - name: Upload binaries assets linux-386
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./doc-gen_linux_386
            asset_name: doc-gen_linux_386
            asset_content_type: application/octet-stream

        - name: Upload binaries assets linux-amd64
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./doc-gen_linux_amd64
            asset_name: doc-gen_linux_amd64
            asset_content_type: application/octet-stream

        - name: Upload binaries assets windows-386
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./doc-gen_windows_386.exe
            asset_name: doc-gen_windows_386.exe
            asset_content_type: application/octet-stream

        - name: Upload binaries assets windows-amd64
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./doc-gen_windows_amd64.exe
            asset_name: doc-gen_windows_amd64.exe
            asset_content_type: application/octet-stream

        - name: Upload binaries assets darwin-amd64
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: ./doc-gen_darwin_amd64
            asset_name: doc-gen_darwin_amd64
            asset_content_type: application/octet-stream